# Caesar Cipher Program
# This program allows users to encode or decode a message using a Caesar cipher.

# Alphabet is repeated to handle shifts beyond the end of the alphabet.
alphabet = [
    'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p',
    'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z', 'a', 'b', 'c', 'd', 'e', 'f',
    'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v',
    'w', 'x', 'y', 'z'
]

def caesar(start_text, shift_amount, cipher_direction):
  """
    Encodes or decodes a message using a Caesar cipher.

    Args:
        start_text (str): The input message.
        shift_amount (int): The number of positions to shift.
        cipher_direction (str): "encode" to encrypt or "decode" to decrypt.
    """
  end_text = ""
  
  # Adjust shift direction for decoding
  if cipher_direction == "decode":
      shift_amount *= -1

  # Process each character in the text
  for char in start_text:
      if char not in alphabet:
          end_text += char 
      else:
          position = alphabet.index(char)
          new_position = position + shift_amount
          end_text += alphabet[new_position]
  
  print(f"Here's the {cipher_direction}d result: {end_text}")


# Main program loop
def main():
    should_continue = True
    while should_continue:

        # Get user inputs
        direction = input("Type 'encode' to encrypt, type 'decode' to decrypt:\n").lower()
        text = input("Type your message:\n").lower()
        shift = int(input("Type the shift number:\n"))

        # Handle shifts greater than 26
        shift %= 26

        # Call the Caesar cipher function
        caesar(start_text=text, shift_amount=shift, cipher_direction=direction)

        # Ask if the user wants to continue
        play_again = input("Would you like to play again? Type 'yes' or 'no':\n").lower()
        if play_again == "no":
            should_continue = False
            print("Goodbye!")
